# coding=utf-8
from collections import Counter


class Solution(object):
    """
    Time: O(V^2)
    Space: O(V)
    """
    def __init__(self):
        self.father = []

    def min_malware_spread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        self.build_components(graph)
        union = Counter(self.find(i) for i in range(len(graph)))  # 这里不能用self.father[i]替代self.find(i)
        malware = Counter(self.find(i) for i in initial)
        return min(initial, key=lambda x: [malware[self.find(x)] > 1, -union[self.find(x)], x])

    def build_components(self, graph):
        n = len(graph)
        self.father = range(n)

        for i in xrange(n):
            for j in xrange(i + 1, n):
                if graph[i][j] == 1:
                    self.union(i, j)

    def union(self, a, b):
        self.father[self.find(a)] = self.find(b)

    def find(self, a):
        path = []
        node = a
        while node != self.father[node]:
            path.append(node)
            node = self.father[node]
        for p in path:
            self.father[p] = node
        return node
